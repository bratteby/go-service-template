// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package example

import (
	"context"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that exampleRepositoryMock does implement exampleRepository.
// If this is not the case, regenerate this file with moq.
var _ exampleRepository = &exampleRepositoryMock{}

// exampleRepositoryMock is a mock implementation of exampleRepository.
//
//	func TestSomethingThatUsesexampleRepository(t *testing.T) {
//
//		// make and configure a mocked exampleRepository
//		mockedexampleRepository := &exampleRepositoryMock{
//			FindOneByIDFunc: func(ctx context.Context, id uuid.UUID) (Example, error) {
//				panic("mock out the FindOneByID method")
//			},
//			SaveFunc: func(ctx context.Context, ex Example) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedexampleRepository in code that requires exampleRepository
//		// and then make assertions.
//
//	}
type exampleRepositoryMock struct {
	// FindOneByIDFunc mocks the FindOneByID method.
	FindOneByIDFunc func(ctx context.Context, id uuid.UUID) (Example, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, ex Example) error

	// calls tracks calls to the methods.
	calls struct {
		// FindOneByID holds details about calls to the FindOneByID method.
		FindOneByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ex is the ex argument value.
			Ex Example
		}
	}
	lockFindOneByID sync.RWMutex
	lockSave        sync.RWMutex
}

// FindOneByID calls FindOneByIDFunc.
func (mock *exampleRepositoryMock) FindOneByID(ctx context.Context, id uuid.UUID) (Example, error) {
	if mock.FindOneByIDFunc == nil {
		panic("exampleRepositoryMock.FindOneByIDFunc: method is nil but exampleRepository.FindOneByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindOneByID.Lock()
	mock.calls.FindOneByID = append(mock.calls.FindOneByID, callInfo)
	mock.lockFindOneByID.Unlock()
	return mock.FindOneByIDFunc(ctx, id)
}

// FindOneByIDCalls gets all the calls that were made to FindOneByID.
// Check the length with:
//
//	len(mockedexampleRepository.FindOneByIDCalls())
func (mock *exampleRepositoryMock) FindOneByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindOneByID.RLock()
	calls = mock.calls.FindOneByID
	mock.lockFindOneByID.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *exampleRepositoryMock) Save(ctx context.Context, ex Example) error {
	if mock.SaveFunc == nil {
		panic("exampleRepositoryMock.SaveFunc: method is nil but exampleRepository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ex  Example
	}{
		Ctx: ctx,
		Ex:  ex,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, ex)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedexampleRepository.SaveCalls())
func (mock *exampleRepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	Ex  Example
} {
	var calls []struct {
		Ctx context.Context
		Ex  Example
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
